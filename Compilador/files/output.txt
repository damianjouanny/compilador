
*************************
Resultado del análisis: 
Exitoso - Sin errores

*************************
Construcciones sintacticas: 
Sintactico: Declaración de variables-- Linea: 2-- Tipo: Regla
Sintactico: Operación de division-- Linea: 4-- Tipo: Regla
Sintactico: Asignacion-- Linea: 4-- Tipo: Regla
Sintactico: Sentencia Print-- Linea: 6-- Tipo: Regla
Sintactico: Sentencia Print-- Linea: 9-- Tipo: Regla
Sintactico: Sentencia If completa-- Linea: 10-- Tipo: Regla

*************************
Tabla de símbolos: 
Token: PalabraReservada: ID --- Lexema: _PARAM --- Linea: 0
Token: PalabraReservada: ID --- Lexema: x_main --- Linea: 2
Token: PalabraReservada: CTE --- Lexema: 1 --- Linea: 5
Token: PalabraReservada: string --- Lexema: OK EXPRESION --- Linea: 6
Token: PalabraReservada: ID --- Lexema: z_main --- Linea: 2
Token: PalabraReservada: string --- Lexema: NO IGUAL --- Linea: 9
Token: PalabraReservada: ID --- Lexema: y_main --- Linea: 2
Token: PalabraReservada: CTE --- Lexema: 20000 --- Linea: 4
Token: PalabraReservada: CTE --- Lexema: 0 --- Linea: 4

*************************
Tercetos generados: 
( 0: /, 20000, 0 )
( 1: =, y_main, [0] )
( 2: ==, y_main, 1 )
( 3: BF, NULL, NULL )
( 4: Print, OK EXPRESION, NULL )
( 5: BI, NULL, NULL )
( 6: Label, NULL, NULL )
( 7: Print, NO IGUAL, NULL )
( 8: Label, NULL, NULL )

*************************
.386
.model flat, stdcall
option casemap :none
include \masm32\include\windows.inc
include \masm32\include\kernel32.inc
include \masm32\include\user32.inc
include \masm32\include\masm32.inc
includelib \masm32\lib\kernel32.lib
includelib \masm32\lib\user32.lib
includelib \masm32\lib\user32.lib
.DATA
_y_main DD 0
cadena1 DB 'NO IGUAL',0
cadena0 DB 'OK EXPRESION',0
_0 DD 0
DIVISION_POR_CERO_MESSAGE DB "División por cero$"
.CODE
DIVISION_POR_CERO:
invoke MessageBox, NULL, addr DIVISION_POR_CERO_MESSAGE, addr DIVISION_POR_CERO_MESSAGE, MB_OK 
invoke ExitProcess,0
SALIR:
invoke ExitProcess,0			; DOS: termina el programa
START:
MOV EAX, 20000
CMP _0, 0
JE DIVISION_POR_CERO
MOV EDX, 0
DIV _0
MOV _y_main, EAX
MOV EBX, _y_main
CMP EBX, 1
JNE _etiq6
invoke MessageBox, NULL, addr cadena0, addr cadena0, MB_OK
JMP _etiq8
_etiq6: 
invoke MessageBox, NULL, addr cadena1, addr cadena1, MB_OK
_etiq8: 
JMP SALIR
END START
